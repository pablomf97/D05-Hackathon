package services;

import java.util.Collection;
import java.util.Date;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;
import org.springframework.validation.Validator;

import domain.Review;

import repositories.ReviewRepository;

@Transactional
@Service
public class ReviewService {

	@Autowired
	private ReviewRepository reviewRepository;
	
//	@Autowired
//	private ActorService				actorService;
	
	@Autowired
	private Validator					validator;
	
	
	// Simple CRUD methods -----------------------------------

	public Review create() {
	//	Actor principal;
		Review result;

//		principal = this.actorService.findByPrincipal();
//		Assert.isTrue(this.actorService.checkAuthority(principal, "CRITIC"), "not.allowed");

		result = new Review();

		result.setCreationDate(new Date(System.currentTimeMillis() - 1));
		result.setStatus("PENDING");


		return result;
	}
	public Collection<Review> findAll() {
		Collection<Review> result;
		result = this.reviewRepository.findAll();

		return result;
	}

	public Review findOne(final int reviewId) {
		Review result;
		result = this.reviewRepository.findOne(reviewId);

		return result;
	}
	
	public void delete(final Review review) {
		//Actor principal;

		Assert.notNull(review);
		Assert.isTrue(review.getId() != 0, "wrong.id");
//
//		principal = this.actorService.findByPrincipal();
//		Assert.isTrue(this.actorService.checkAuthority(principal, "ROOKIE"), "not.allowed");
//
//		Assert.isTrue(application.getRookie().equals(principal), "not.allowed");

		this.reviewRepository.delete(review.getId());

	}
	
	
	public Application save(final Application application) {
		Actor principal;
		Application result;

		principal = this.actorService.findByPrincipal();
		Assert.notNull(principal, "not.allowed");
		Assert.notNull(application);

		Assert.notNull(application.getPosition());
		Assert.notNull(application.getRookie());
		Assert.notNull(application.getApplicationMoment());
		Assert.isTrue(!application.getPosition().getIsCancelled());
		Assert.isTrue(!application.getPosition().getIsDraft());

		if (this.actorService.checkAuthority(principal, "ROOKIE")) {

			Assert.isTrue(application.getRookie().equals(principal));
			Assert.isTrue(application.getStatus().equalsIgnoreCase("PENDING"));

			if (application.getId() == 0) {

				final Collection<Application> alreadyApplied = this.findApplicationsNotRejectedByRookieId(principal.getId());
				for (final Application app : alreadyApplied)
					Assert.isTrue(!application.getPosition().equals(app.getPosition()), "already.applied");

			} else {

				Assert.isTrue(!this.findOne(application.getId()).getStatus().equals("ACCEPTED"));
				Assert.isTrue(!this.findOne(application.getId()).getStatus().equals("REJECTED"));
				Assert.notNull(application.getExplanation());
				Assert.notNull(application.getLinkCode());
				Assert.notNull(application.getCopyCurricula());

				application.setSubmitMoment(new Date(System.currentTimeMillis() - 1));
				application.setStatus("SUBMITTED");

				Assert.isTrue(application.getApplicationMoment().before(application.getSubmitMoment()));

				Curricula curriculaCopy = this.curriculaService.createCopy();

				try {
					PersonalData personalDataCopy = this.personalDataService.createCopy();
					personalDataCopy = application.getCopyCurricula().getPersonalData().clone();
					personalDataCopy = this.personalDataService.saveCopy(personalDataCopy);

					curriculaCopy.setPersonalData(personalDataCopy);

					if (!application.getCopyCurricula().getEducationData().isEmpty()) {

						final Collection<EducationData> auxEdCopy = new ArrayList<>(application.getCopyCurricula().getEducationData());
						final Collection<EducationData> educationCopy = new ArrayList<EducationData>();

						for (final EducationData edData : auxEdCopy) {
							EducationData educationDataCopy = this.educationDataService.createCopy();
							educationDataCopy = edData.clone();
							educationDataCopy = this.educationDataService.saveCopy(educationDataCopy);
							educationCopy.add(educationDataCopy);
						}
						curriculaCopy.setEducationData(educationCopy);
					}

					if (!application.getCopyCurricula().getMiscellaneousData().isEmpty()) {

						final Collection<MiscellaneousData> auxMiscCopy = new ArrayList<>(application.getCopyCurricula().getMiscellaneousData());
						final Collection<MiscellaneousData> miscellaneousCopy = new ArrayList<MiscellaneousData>();

						for (final MiscellaneousData miscData : auxMiscCopy) {
							MiscellaneousData miscellaneousDataCopy = this.miscellaneousDataService.createCopy();
							miscellaneousDataCopy = miscData.clone();
							miscellaneousDataCopy = this.miscellaneousDataService.saveCopy(miscellaneousDataCopy);
							miscellaneousCopy.add(miscellaneousDataCopy);
						}
						curriculaCopy.setMiscellaneousData(miscellaneousCopy);
					}

					if (!application.getCopyCurricula().getPositionData().isEmpty()) {

						final Collection<PositionData> auxPosCopy = new ArrayList<>(application.getCopyCurricula().getPositionData());
						final Collection<PositionData> positionCopy = new ArrayList<PositionData>();

						for (final PositionData posData : auxPosCopy) {
							PositionData positionDataCopy = this.positionDataService.createCopy();
							positionDataCopy = posData.clone();
							positionDataCopy = this.positionDataService.saveCopy(positionDataCopy);
							positionCopy.add(positionDataCopy);
						}
						curriculaCopy.setPositionData(positionCopy);
					}

				} catch (final CloneNotSupportedException e) {
					e.printStackTrace();
				}
				curriculaCopy = this.curriculaService.save(curriculaCopy);
				this.curriculaService.flush();
				application.setCopyCurricula(curriculaCopy);
			}

		} else if (this.actorService.checkAuthority(principal, "COMPANY")) {

			Assert.isTrue(!application.getStatus().equals("PENDING"));
			Assert.isTrue(!application.getStatus().equals("SUBMITTED"));

			Assert.isTrue(application.getPosition().getCompany().equals(principal));

			Assert.isTrue(application.getId() != 0);
			Assert.notNull(application.getExplanation());
			Assert.notNull(application.getLinkCode());
			Assert.notNull(application.getCopyCurricula());

		}

		result = this.applicationRepository.save(application);
		Assert.notNull(result);

		return result;
	}



	
	
	
}
